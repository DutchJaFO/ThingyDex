@using BlazorBootstrap
@using ThingyDexer.Model.General;
@using ThingyDexer.ViewModel
@using ThingyDexer.ViewModel.Table
@using ThingyDexer.WASM.Shared.Components
@using ThingyDexer.Model.Table;

<div>
    <!-- Step 1 : how do we create our (cult) name -->

    <EditForm Model="CultNameSettingsViewModel"
              OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">

        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <!-- Cult name -->
        <!-- header -->
        @if (CultNameSettingsViewModel.Settings.CultnameInputType != null)
        {
            if (CultNameSettingsViewModel.UseGenerator == true)
            {
                <!--re-roll bits -->
                <div class="row">
                    <div class="col-sm-auto py-1 px-1">
                        <Button Disabled="@HasNoSelection" @ref=BtnReRollSelection Size="Size.Medium"
                        Color="ButtonColor.Secondary"
                        @onclick="@((a)=>{CultNameSettingsViewModel.RerollSelectedRegel();StateHasChanged();})">
                            <Icon Name="IconName.Dice3Fill" />
                            Re-roll selection
                        </Button>
                    </div>
                    <div class="col-sm-auto py-1 px-1">
                        <Button @ref=BtnReRollName Size="Size.Medium" Disabled="@HasNoCultname"
                        Color="ButtonColor.Secondary"
                        @onclick="@(()=> {CultNameSettingsViewModel.RerollCultName(); StateHasChanged();})">
                            <Icon Name="IconName.Dice4Fill" />
                            Re-roll name
                        </Button>
                    </div>
                    <div class="col"></div>
                </div>
                <!--remove bits -->
                @if (CultNameSettingsViewModel.Settings.CultnameInputType == Model.General.CultnameInputType.Custom)
                {
                    <div class="row">
                        <div class="col-sm-auto py-1 px-1">
                            <Button @ref=BtnClearSelection Disabled="@HasNoSelection"
                        Size="Size.Medium"
                        Color="ButtonColor.Danger" @onclick="@(() => {CultNameSettingsViewModel.ClearSelectedItem();StateHasChanged();})">
                                <Icon Name="IconName.Trash" />
                                Delete selection
                            </Button>
                        </div>
                        <div class="col-sm-auto py-1 px-1">
                            <Button @ref=BtnClearName Size="Size.Medium" Disabled="@HasNoCultname"
                        Color="ButtonColor.Danger" @onclick="@(() => {CultNameSettingsViewModel.ClearCultname();StateHasChanged();})">
                                <Icon Name="IconName.Trash" />
                                Delete name
                            </Button>
                        </div>
                        <div class="col"></div>
                    </div>
                }

                <!--show rolled result -->
                <div class="row">
                    <div class="col-sm-auto">
                        <div class="mx-4 my-2 px-2 py-2">
                            @if (CultNameSettingsViewModel.Settings.IncludeRandomDefiniteArticle)
                            {
                                <TableRowDisplayItem Table="@CultNameSettingsViewModel.CultnameTableSet.DefiniteArticleTable"
                                         Value="@CultNameSettingsViewModel.DefiniteArticle"
                                         ValueChanged="@((n) => {CultNameSettingsViewModel.DefiniteArticle = n; })"
                                         SelectedRegel="@CultNameSettingsViewModel.SelectedRegel"
                                         SelectedRegelChanged="@((r) => { CultNameSettingsViewModel.SelectedRegel = r; })" />
                            }
                            @if (CultNameSettingsViewModel.Settings.CultnameInputType.HasAdjective1())
                            {
                                <TableRowDisplayItem Table="@CultNameSettingsViewModel.CultnameTableSet.AdjectiveTable1"
                                         Value="@CultNameSettingsViewModel.Adjective1"
                                         ValueChanged="@((n) => {CultNameSettingsViewModel.Adjective1 = n; })"
                                         SelectedRegel="@CultNameSettingsViewModel.SelectedRegel"
                                         SelectedRegelChanged="@((r) => { CultNameSettingsViewModel.SelectedRegel = r; })" />
                            }
                            @if (CultNameSettingsViewModel.Settings.CultnameInputType.HasNoun1())
                            {
                                <TableRowDisplayItem Table="@CultNameSettingsViewModel.CultnameTableSet.NameTable"
                                         Value="@CultNameSettingsViewModel.Noun1"
                                         SuffixAction="@((n) => (CultNameSettingsViewModel.Settings.CultnameInputType == CultnameInputType.TemplateAdjective2PossessiveNoun2Adjective1Noun1) ? MakePossessive(n) : n)"
                                         ValueChanged="@((n) => {CultNameSettingsViewModel.Noun1 = n; })"
                                         SelectedRegel="@CultNameSettingsViewModel.SelectedRegel"
                                         SelectedRegelChanged="@((r) => { CultNameSettingsViewModel.SelectedRegel = r; })" />

                            }
                            <!-- -->
                            @if ((CultNameSettingsViewModel.Noun1 is not null) && (CultNameSettingsViewModel.Noun2 is not null) && (CultNameSettingsViewModel.Settings.CultnameInputType != CultnameInputType.TemplateAdjective2PossessiveNoun2Adjective1Noun1))
                            {
                                <span>
                                    <Button Type="ButtonType.Button" Color="ButtonColor.None" Disabled=true Active=false Outline=false>
                                        <h4>of the</h4>
                                    </Button>
                                </span>
                            }
                            <!-- -->
                            @if (CultNameSettingsViewModel.Settings.CultnameInputType.HasAdjective2())
                            {
                                <TableRowDisplayItem Table="@CultNameSettingsViewModel.CultnameTableSet.AdjectiveTable2"
                                         Value="@CultNameSettingsViewModel.Adjective2"
                                         ValueChanged="@((n) => {CultNameSettingsViewModel.Adjective2 = n; })"
                                         SelectedRegel="@CultNameSettingsViewModel.SelectedRegel"
                                         SelectedRegelChanged="@((r) => { CultNameSettingsViewModel.SelectedRegel = r; })" />
                            }
                            @if (CultNameSettingsViewModel.Settings.CultnameInputType.HasNoun2())
                            {
                                <TableRowDisplayItem Table="@CultNameSettingsViewModel.CultnameTableSet.SomethingTable"
                                         Value="@CultNameSettingsViewModel.Noun2"
                                         ValueChanged="@((n) => {CultNameSettingsViewModel.Noun2 = n; })"
                                         SelectedRegel="@CultNameSettingsViewModel.SelectedRegel"
                                         SelectedRegelChanged="@((r) => { CultNameSettingsViewModel.SelectedRegel = r; })" />
                            }
                        </div>
                    </div>
                </div>

                <!--show details -->
                <div class="row">
                    <div class="col-sm-auto py-1 px-1">
                        @if(CultNameSettingsViewModel is not null)
                        {
                            var testLabel = $"Show details of table {CultNameSettingsViewModel.SelectedRegel?.Owner?.Name ?? String.Empty}";
                            <Switch @ref=swShowDetails @bind-Value="@CultNameSettingsViewModel.ShowDetails" Label="@testLabel">
                            </Switch>
                        }
                    </div>
                </div>
            }
        }
        else
        {
            <p>choose a method for your madness ...</p>
        }
    </EditForm>
    <!--footer -->
</div>
@if ((CultNameSettingsViewModel?.ShowDetails == true) && (CultNameSettingsViewModel.SelectedRegel != null))
{
    <div class="row">
        <div class="col-md-auto">
            <div class="my-2">
                Table : <strong>@CultNameSettingsViewModel?.SelectedRegel?.Owner.Name</strong>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-auto">
            <div class="my-2">
                <Grid TItem="SelectableRegelString"
                  DataProvider="SelectedRegelTableDataProvider"
                      class="table table-sm table-hover table-bordered table-striped"
                  AllowPaging=true
                  PaginationAlignment="Alignment.Start"
                  Responsive=true
                  AllowFiltering=true
                  AllowSorting=true>
                    <GridColumn TItem="SelectableRegelString" PropertyName="Selected" HeaderText="" Sortable=false FilterOperator="FilterOperator.Equals" Class="col-sm-auto">
                        <Switch Value="context.Selected"
                            ValueChanged="@(() => {var x=context; DoChangeSelectedRow(x, (CultNameSettingsViewModel?.Settings.CultnameInputType == CultnameInputType.Custom));})"></Switch>
                    </GridColumn>
                    <GridColumn TItem="SelectableRegelString"
                            PropertyName="IdText"
                            HeaderText="Id"
                            IsDefaultSortColumn=true SortDirection="SortDirection.Ascending" SortKeySelector="@((o) => o.IdText)" Class="col-sm-auto" FilterValue="">
                        <label @onclick="@(() => {var x=context; DoChangeSelectedRow(x, (CultNameSettingsViewModel?.Settings.CultnameInputType == CultnameInputType.Custom));})">
                            @if (context.Selected)
                            {
                                <strong>
                                    @context.IdText
                                </strong>
                            }
                            else
                            {
                                @context.IdText
                            }
                        </label>
                    </GridColumn>
                    <GridColumn TItem="SelectableRegelString" PropertyName="Name" HeaderText="Value" Sortable=true SortKeySelector="@((o) => o.Name)" Class="col-sm-auto">
                        <label @onclick="@(() => {var x=context; DoChangeSelectedRow(x, (CultNameSettingsViewModel?.Settings.CultnameInputType == CultnameInputType.Custom));})">
                            @if (context.Selected)
                            {
                                <strong>
                                    @context.Name
                                </strong>
                            }
                            else
                            {
                                @context.Name
                            }
                        </label>
                    </GridColumn>
                </Grid>
            </div>
        </div>
    </div>
}

@code{
    private Button BtnReRollName;
    private Button BtnReRollSelection;
    private Button BtnClearName;
    private Button BtnClearSelection;

    private Switch swShowDetails;

    public bool HasNoCultname {get;set;}
    public bool HasNoSelection {get;set;}

    private void DoOnUpdateCultname(string? newName)
    {
        HasNoCultname = string.IsNullOrEmpty(newName);

        StateHasChanged();
    }

    private void DoOnUpdateSelection(TableRowBase<string>? selection)
    {
        if (swShowDetails is not null)
        {
            if (selection is null)
                swShowDetails.Disable();
            else
                swShowDetails.Enable();
        }

        HasNoSelection = (selection is null);

        StateHasChanged();
    }

}
