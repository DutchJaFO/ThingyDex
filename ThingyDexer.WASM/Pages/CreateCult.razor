@page "/createcult"

@using BlazorBootstrap
@using ThingyDexer.ViewModel
@using ThingyDexer.ViewModel.Table
@using ThingyDexer.WASM.Shared.Components

<PageTitle>Cult manager</PageTitle>

<h1>Starting a cult</h1>

@if (true)
{
    <Callout Type="CalloutType.Default" Heading="Cult name">
        <hr />
        <div class="row">
            <div class="col-sm-auto" >
                <Button Color="ButtonColor.Primary" Size="Size.Medium"
                    @onclick="@(() => { GenerateCultName(false); })">
                    <Icon Name="IconName.Dice1Fill" />
                    [thingy] of the [prefix] [things]
                </Button>
            </div>

            <div class="col-sm-auto" >
                <Button Color="ButtonColor.Primary" Size="Size.Medium"
                    @onclick="@(() => { GenerateCultName(true); })">
                    <Icon Name="IconName.Dice2Fill" />
                    [prefix] [thingy] of the [prefix] [things]
                </Button>
            </div>

            <div class="col-sm-auto" >
                <Button Disabled="@(HasCultname == false)" Size="Size.Medium"
                    Color="ButtonColor.Secondary"
                    @onclick="@RerollCultName">
                    <Icon Name="@ThingyDexer.WASM.General.Randomizer.DiceFillIcon" />
                    Re-roll name
                </Button>
            </div>
            <div class="col-sm-auto">
                <Button Disabled="@((HasCultname == false) || (Prefix1 is null))" Size="Size.Medium"
                    Color="ButtonColor.Danger" @onclick="@ClearPrefix">
                    <Icon Name="IconName.Trash" />
                    Clear prefix
                </Button>
            </div>
            <div class="col-sm-auto">
                <Button Disabled="@(HasCultname == false)" Size="Size.Medium"
                    Color="ButtonColor.Danger" @onclick="@ClearCultname">
                    <Icon Name="IconName.Trash" />
                    Clear name
                </Button>
            </div>
            <div class="col"></div>
        </div>
        <div class="row">
            <div class="col">
                <TableRowDisplayItem RowItem="@Prefix1"
                                 Table=@CultnameTableSet.PrefixTable
                                 RowItemChanged="@((o) => {Prefix1 = o;if (SkipUpdate == false){ SelectedRegel = o;}; StateHasChanged();})"
                                 HasPrefix=false
                                 Selected="@Prefix1Selected"
                                 OnRowSelect="@DoOnRowSelect" />

                <TableRowDisplayItem RowItem="@Item1"
                                 Table=@CultnameTableSet.NameTable
                                 RowItemChanged="@((o) => {Item1 = o;if (SkipUpdate == false){ SelectedRegel = o;}; StateHasChanged();})"
                                 HasPrefix=true
                                 Selected="@Item1Selected"
                                 OnRowSelect="@DoOnRowSelect" />

                <TableRowDisplayItem Table=@CultnameTableSet.PrefixNameTable
                                 RowItem="@Prefix2" RowItemChanged="@((o) => {Prefix2 = o;if (SkipUpdate == false){ SelectedRegel = o;}; StateHasChanged();})"
                                 HasPrefix=true Prefix="@(Prefix2 != null ?"of the" : null)"
                                 Selected="@Prefix2Selected"
                                 OnRowSelect="@DoOnRowSelect" />

                <TableRowDisplayItem Table=@CultnameTableSet.SomethingTable
                                 RowItem="@Item2" RowItemChanged="@((o) => {Item2 = o;if (SkipUpdate == false){ SelectedRegel = o;}; StateHasChanged();})"
                                 HasPrefix=true Prefix="@((Prefix2 == null) && (Item2 != null) ?"of the" : null)"
                                 Selected="@Item2Selected"
                                 OnRowSelect="@DoOnRowSelect" />
            </div>
        </div>

        <hr />
        <div class="row">
            <span class="px-3">
                @($"{TimeStamp:dd-MM-yyyy HH:mm:ss}")
            </span>
        </div>
    </Callout>
    @if (ShowDetails)
    {
        <div class="row">
            <div class="col-md-auto table-responsive">
                @if (ShowDetails && (SelectedRegel is not null))
                {
                    <Grid Data="@SelectedRegel?.Owner?.Rows(o => new SelectableRegelString() { Selected = (o.Index == SelectedRegel.Index), Id= o.Index, Name = o.Value})"
                          class="table table-sm table-hover table-bordered table-striped"
              AllowPaging=true
              PaginationAlignment="Alignment.Start"
              Responsive=true
              AllowFiltering=true
              AllowSorting=true>
                        <GridColumn TItem="SelectableRegelString" PropertyName="Selected" HeaderText="" Sortable=false FilterOperator="FilterOperator.Equals" Class="col-sm-auto">
                            @if (context.Selected)
                            {
                                <Icon Name="IconName.Check2Square"></Icon>
                            }
                            else
                            {
                                <Icon Name="IconName.Square"></Icon>
                            }
                        </GridColumn>
                        <GridColumn TItem="SelectableRegelString"
                        PropertyName="Id"
                        HeaderText="Id"
                        IsDefaultSortColumn=true SortDirection="SortDirection.Ascending" SortKeySelector="@((o) => o.Id)" Class="col-sm-auto" FilterValue="">
                            @if (context.Selected)
                            {
                                <strong>
                                    @context.Id.ToString("D3")
                                </strong>
                            }
                            else
                            {
                                @context.Id.ToString("D3")
                            }
                        </GridColumn>
                        <GridColumn TItem="SelectableRegelString" PropertyName="Name" HeaderText="Value" Sortable=true SortKeySelector="@((o) => o.Name)" Class="col-sm-auto">
                            @if (context.Selected)
                            {
                                <strong>
                                    @context.Name
                                </strong>
                            }
                            else
                            {
                                @context.Name
                            }
                        </GridColumn>
                    </Grid>
                }
            </div>
            <div class="col"></div>
        </div>
    }
}
else
{
    <Callout Type="CalloutType.Tip">
        <h4>Try clicking the button ...</h4>
    </Callout>
}



