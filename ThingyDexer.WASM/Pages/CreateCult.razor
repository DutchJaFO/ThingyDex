@page "/createcult"

@using BlazorBootstrap
@using ThingyDexer.Model.General;
@using ThingyDexer.ViewModel
@using ThingyDexer.ViewModel.Table
@using ThingyDexer.WASM.Shared.Components

<PageTitle>Create a Cult</PageTitle>

<h1>Starting a cult</h1>

@if (true)
{
    <Callout Type="CalloutType.Default" Heading="Pick a naming convention for your Cult">
        <!-- Step 1 : how do we create our (cult) name -->
        <!-- option 1 : Template 1 -->
        <EditForm Model="CultNameSettingsViewModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary></ValidationSummary>
            <InputRadioGroup @bind-Value="CultNameSettingsViewModel.CultnameInputType">
                <div class="row">
                    <div class="col-sm-3 py-1 px-1">
                        <InputRadio id="edtTemplate1"
                                Value="CultnameInputType.TemplateNounOfTheAdjectiveNoun" />
                        <label class="px-2" for="edtTemplate1">
                            [noun] of the [adjective] [noun]
                        </label>
                    </div>
                </div>
                <!-- option 2 : Template 2  -->
                <div class="row">
                    <div class="col-sm-3 py-1 px-1">
                        <InputRadio id="edtTemplate2"
                                Value="CultnameInputType.TemplatePrefixNounOfTheAdjectiveNoun" />
                        <label class="px-2" for="edtTemplate2">[prefix] [noun] of the [adjective] [noun]</label>
                    </div>
                </div>
                <!-- option 2 : Template 3  -->
                <div class="row">
                    <div class="col-sm-3 py-1 px-1">
                        <InputRadio id="edtTemplate3"
                                Value="CultnameInputType.TemplatePrefixNounOfTheNoun" />
                        <label class="px-2" for="edtTemplate3">[prefix] [noun] of the [noun]</label>
                    </div>
                </div>
                <!-- option 2 : Template 4  -->
                <div class="row">
                    <div class="col-sm-3 py-1 px-1">
                        <InputRadio id="edtTemplate4"
                                Value="CultnameInputType.TemplateNounOfTheNoun" />
                        <label class="px-2" for="edtTemplate4">[noun] of the [noun]</label>
                    </div>
                </div>
                <!-- option 2 : Template 5  -->
                <div class="row">
                    <div class="col-sm-3 py-1 px-1">
                        <InputRadio id="edtTemplate5"
                                Value="CultnameInputType.TemplatePrefixAdjectiveNoun" />
                        <label class="px-2" for="edtTemplate5">[Prefix] [Adjective] [noun]</label>
                    </div>
                </div>
                <!-- option 2 : Template 6  -->
                <div class="row">
                    <div class="col-sm-3 py-1 px-1">
                        <InputRadio id="edtTemplate6"
                                Value="CultnameInputType.TemplatePrefixNoun" />
                        <label class="px-2" for="edtTemplate6">[Prefix] [noun]</label>
                    </div>
                </div>
                <!-- option 2 : Template 7  -->
                <div class="row">
                    <div class="col-sm-3 py-1 px-1">
                        <InputRadio id="edtTemplate7"
                                Value="CultnameInputType.TemplateAdjectiveNoun" />
                        <label class="px-2" for="edtTemplate7">[adjective] [noun]</label>
                    </div>
                </div>
                <!-- option 3 : Custom  -->
                <div class="row">
                    <div class="col-sm-3 py-1 px-1">
                        <InputRadio id="edtCustom"
                                Value="CultnameInputType.Custom" />
                        <label class="px-2" for="edtCustom">Roll your own</label>
                    </div>
                </div>
                @**@
                <!-- option 4 : Manual  -->
                <div class="row">
                    <div class="col-sm-3 py-1 px-1">
                        <InputRadio id="edtManual"
                                Value="CultnameInputType.Manual" />
                        <label class="px-1" for="edtManual">Freeform editor</label>
                    </div>
                </div>
                @**@
            </InputRadioGroup>
            <!-- Cult name -->
            <!-- header -->
            <hr />
            @if (CultNameSettingsViewModel.CultnameInputType != null)
            {
                @if (CultNameSettingsViewModel.UseGenerator == true)
                {
                    <h3>Generate Cult name</h3>
                }
                else
                {
                    <h3>Edit Cult name</h3>
                }

                if (CultNameSettingsViewModel.UseGenerator == true)
                {
                    <!--re-roll bits -->
                    <div class="row">
                        <div class="col-sm-auto py-1 px-1">
                            <Button Disabled="@(CultNameSettingsViewModel.SelectedRegel == null)" Size="Size.Medium"
                        Color="ButtonColor.Secondary"
                        @onclick="@(()=>CultNameSettingsViewModel.RerollSelectedRegel())">
                                <Icon Name="IconName.Dice3Fill" />
                                Re-roll selection
                            </Button>
                        </div>
                        <div class="col-sm-auto py-1 px-1">
                            <Button Disabled="@(CultNameSettingsViewModel.HasCultname == false)" Size="Size.Medium"
                        Color="ButtonColor.Secondary"
                        @onclick="@(()=>CultNameSettingsViewModel.RerollCultName())">
                                <Icon Name="IconName.Dice4Fill" />
                                Re-roll name
                            </Button>
                        </div>
                        <div class="col"></div>
                    </div>
                    <!--remove bits -->
                    @if (CultNameSettingsViewModel.CultnameInputType == Model.General.CultnameInputType.Custom)
                    {
                        <div class="row">
                            <div class="col-sm-auto py-1 px-1">
                                <Button Disabled="@((CultNameSettingsViewModel.HasCultname == false) || (CultNameSettingsViewModel.SelectedRegel is null))" Size="Size.Medium"
                        Color="ButtonColor.Danger" @onclick="@(() => CultNameSettingsViewModel.ClearPrefix())">
                                    <Icon Name="IconName.Trash" />
                                    Delete selection
                                </Button>
                            </div>
                            <div class="col-sm-auto py-1 px-1">
                                <Button Disabled="@(CultNameSettingsViewModel.HasCultname == false)" Size="Size.Medium"
                        Color="ButtonColor.Danger" @onclick="@(() => CultNameSettingsViewModel.ClearCultname())">
                                    <Icon Name="IconName.Trash" />
                                    Delete name
                                </Button>
                            </div>
                            <div class="col"></div>
                        </div>
                    }

                    <!--show rolled result -->
                    <div class="row">
                        <div class="col-sm-auto">
                            <div class="mx-4 my-2 px-2 py-2">
                                @if (CultNameSettingsViewModel.CultnameInputType.HasPrefix1())
                                {
                                    <TableRowDisplayItem Table="@CultNameSettingsViewModel.CultnameTableSet.PrefixNameTable"
                                         Noun="@CultNameSettingsViewModel.Prefix1"
                                         NounChanged="@((n) => {CultNameSettingsViewModel.Prefix1 = n; CultNameSettingsViewModel.ShowDetails = true;})"
                                         SelectedRegel="@CultNameSettingsViewModel.SelectedRegel"
                                         SelectedRegelChanged="@((r) => { CultNameSettingsViewModel.SelectedRegel = r; CultNameSettingsViewModel.ShowDetails = true;})" />
                                }
                                @if (CultNameSettingsViewModel.CultnameInputType.HasNoun1())
                                {
                                    <TableRowDisplayItem Table="@CultNameSettingsViewModel.CultnameTableSet.NameTable"
                                         Noun="@CultNameSettingsViewModel.Noun1"
                                         NounChanged="@((n) => {CultNameSettingsViewModel.Noun1 = n; CultNameSettingsViewModel.ShowDetails = true;})"
                                         SelectedRegel="@CultNameSettingsViewModel.SelectedRegel"
                                         SelectedRegelChanged="@((r) => { CultNameSettingsViewModel.SelectedRegel = r; CultNameSettingsViewModel.ShowDetails = true;})" />

                                }
                                <!-- -->
                                @if ((CultNameSettingsViewModel.Noun1 is not null) && (CultNameSettingsViewModel.Noun2 is not null))
                                {
                                    <span>
                                        <Button Type="ButtonType.Button"
                                Color="ButtonColor.None"
                                Disabled=true
                                Active=false
                                Outline=false>
                                            <h4>
                                                of the
                                            </h4>
                                        </Button>
                                    </span>
                                }
                                <!-- -->
                                @if (CultNameSettingsViewModel.CultnameInputType.HasPrefix2())
                                {
                                    <TableRowDisplayItem Table="@CultNameSettingsViewModel.CultnameTableSet.PrefixTable"
                                         Noun="@CultNameSettingsViewModel.Prefix2"
                                         NounChanged="@((n) => {CultNameSettingsViewModel.Prefix2 = n; CultNameSettingsViewModel.ShowDetails = true;})"
                                         SelectedRegel="@CultNameSettingsViewModel.SelectedRegel"
                                         SelectedRegelChanged="@((r) => { CultNameSettingsViewModel.SelectedRegel = r; CultNameSettingsViewModel.ShowDetails = true;})" />
                                }
                                @if (CultNameSettingsViewModel.CultnameInputType.HasNoun2())
                                {
                                    <TableRowDisplayItem Table="@CultNameSettingsViewModel.CultnameTableSet.SomethingTable"
                                         Noun="@CultNameSettingsViewModel.Noun2"
                                         NounChanged="@((n) => {CultNameSettingsViewModel.Noun2 = n; CultNameSettingsViewModel.ShowDetails = true;})"
                                         SelectedRegel="@CultNameSettingsViewModel.SelectedRegel"
                                         SelectedRegelChanged="@((r) => { CultNameSettingsViewModel.SelectedRegel = r; CultNameSettingsViewModel.ShowDetails = true;})" />
                                }
                            </div>
                        </div>
                    </div>
                }
                <!--manual edit -->
                @if (CultNameSettingsViewModel.CultnameInputType == CultnameInputType.Manual)
                {
                }
            }
            else
            {
                <p>choose a method for your madness ...</p>
            }
            <!-- buttons -->
            @*
        <div class="row">
        <span class="col px-3">
        <Button Color="ButtonColor.Primary" Type="ButtonType.Submit">Submit</Button>
        <Button Color="ButtonColor.Danger" Type="ButtonType.Button" Disabled="@(CultNameSettingsViewModel.CultnameInputType == null)" onclick="@(() => {HandleReset(); })">Clear</Button>
        </span>
        </div>
        *@

        </EditForm>
        <!--footer -->
        <hr />
        <div class="row">
            <span class="px-3">
                @($"{CultNameSettingsViewModel.TimeStamp:dd-MM-yyyy HH:mm:ss}")
            </span>
        </div>
    </Callout>
    @if (CultNameSettingsViewModel.ShowDetails == true)
    {
        <div class="row">
            <div class="col-md-auto">
                <div class="px-4 my-4">
                    @if ((CultNameSettingsViewModel.ShowDetails == true) && (CultNameSettingsViewModel.SelectedRegel != null))
                    {
                        <Grid Data="@CultNameSettingsViewModel.SelectedRegel.Owner.Rows(o => new SelectableRegelString() { Selected = (o.Index == CultNameSettingsViewModel.SelectedRegel.Index), Id= o.Index, Name = o.Value, Source = CultNameSettingsViewModel.SelectedRegel.Owner})"
                              class="table table-sm table-hover table-bordered table-striped"
                  AllowPaging=true
                  PaginationAlignment="Alignment.Start"
                  Responsive=true
                  AllowFiltering=true
                  AllowSorting=true>
                            <GridColumn TItem="SelectableRegelString" PropertyName="Selected" HeaderText="" Sortable=false FilterOperator="FilterOperator.Equals" Class="col-sm-auto">
                                <Switch Value="context.Selected"
                            ValueChanged="@(() => {var x=context; DoChangeSelectedRow(x, (CultNameSettingsViewModel.CultnameInputType == CultnameInputType.Custom));})"></Switch>
                            </GridColumn>
                            <GridColumn TItem="SelectableRegelString"
                            PropertyName="IdText"
                            HeaderText="Id"
                            IsDefaultSortColumn=true SortDirection="SortDirection.Ascending" SortKeySelector="@((o) => o.IdText)" Class="col-sm-auto" FilterValue="">
                                <label @onclick="@(() => {var x=context; DoChangeSelectedRow(x, (CultNameSettingsViewModel.CultnameInputType == CultnameInputType.Custom));})">
                                    @if (context.Selected)
                                    {
                                        <strong>
                                            @context.IdText
                                        </strong>
                                    }
                                    else
                                    {
                                        @context.IdText
                                    }
                                </label>
                            </GridColumn>
                            <GridColumn TItem="SelectableRegelString" PropertyName="Name" HeaderText="Value" Sortable=true SortKeySelector="@((o) => o.Name)" Class="col-sm-auto">
                                <label @onclick="@(() => {var x=context; DoChangeSelectedRow(x, (CultNameSettingsViewModel.CultnameInputType == CultnameInputType.Custom));})">
                                    @if (context.Selected)
                                    {
                                        <strong>
                                            @context.Name
                                        </strong>
                                    }
                                    else
                                    {
                                        @context.Name
                                    }
                                </label>
                            </GridColumn>
                        </Grid>
                    }
                </div>
            </div>
        </div>
    }
}
@*
    else
    {
    <Callout Type="CalloutType.Tip">
    <h4>Try clicking the button ...</h4>
    </Callout>
    }
    *@



