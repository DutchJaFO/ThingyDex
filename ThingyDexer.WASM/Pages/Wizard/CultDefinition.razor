@using ThingyDexer.Model.Cult

<EditForm EditContext="MyContext" OnValidSubmit="@DoOnValidSubmit" OnInvalidSubmit="@DoOnInvalidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <div class="form-group row mb-3">
        <label class="col-md-2 col-form-label">
            Cult name
        </label>
        <div class="col-sm-10 py-1 px-1">
            <InputText class="w-100" id="edtCultName" @bind-Value="@ViewModel.CultName"></InputText>
            <ValidationMessage For="@(() =>  ViewModel.CultName)"></ValidationMessage>
        </div>
    </div>

    <div class="form-group row mb-3">
        <label class="col-md-2 col-form-label">
            Deity
        </label>
        <div class="col-sm-10 py-1 px-1">
            <InputText class="w-100" id="edtDeity" @bind-Value="@ViewModel.Deity"></InputText>
            <ValidationMessage For="@(() =>  ViewModel.Deity)"></ValidationMessage>
        </div>
    </div>

    <div class="form-group row mb-3">
        <label class="col-md-2 col-form-label">
            Description
        </label>
        <div class="col-sm-10 py-1 px-1">
            <InputTextArea class="w-100" id="edtDescription" @bind-Value="@ViewModel.Description"></InputTextArea>
            <ValidationMessage For="@(() =>  ViewModel.Description)"></ValidationMessage>
        </div>
    </div>

    <div class="form-group row mb-3">
        <label class="col-md-2 col-form-label">
            Primary focus
        </label>
        <div class="col-sm-10 py-1 px-1">
            <InputRadioGroup @bind-Value="ViewModel.PrimaryFocus">
                @{
                    var x = EnumExtensions.GetEnumList<StatBlockType>();
                    foreach (StatBlockType stat in x)
                    {
                        <div class="row">
                            <div class="col py-1 px-1">
                                <InputRadio id="@($"edtTemplate1{stat}")" Value="@stat" />
                                <label class="px-2" for="@($"edtTemplate1{stat}")">
                                    @(
                                    stat.ToString()
                                        )
                                </label>
                            </div>
                        </div>
                    }
                }
            </InputRadioGroup>
            <ValidationMessage For="@(() =>  ViewModel.PrimaryFocus)"></ValidationMessage>
        </div>
    </div>

    <div class="form-group row mb-3">
        <label class="col-md-2 col-form-label">
            Starting Favour
        </label>
        <div class="col-sm-10 py-1 px-1">
            <NumberInput TValue="int?" Class="w-50" id="edtStartingFavour"
                         Value="@ViewModel.StartingFavour" ValueChanged="@((a) => { DoStuffChanged(a); StateHasChanged();})"></NumberInput>
            <ValidationMessage For="@(() =>  ViewModel.StartingFavour)"></ValidationMessage>
        </div>
    </div>

    <div class="form-group row mb-3">
        <label class="col-md-2 col-form-label">Initial power</label>
        <div class="col-sm-10 py-1 px-1">
            <NumberInput TValue="int" AllowNegativeNumbers=false Class="w-50" id="edtInitialPower" 
            @bind-Value="@ViewModel.InitialPower"></NumberInput>
            <ValidationMessage For="@(() =>  ViewModel.InitialPower)"></ValidationMessage>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-2 py-1 px-1">
            Rituals
        </div>
        <div class="col-sm-10 py-1 px-1">
        </div>
    </div>
</EditForm>
