@page "/createcult"

@using BlazorBootstrap
@using ThingyDexer.ViewModel
@using ThingyDexer.ViewModel.Table

<PageTitle>Cult</PageTitle>

<h1>Starting a cult</h1>

<p>
    <Tooltip Title="Changes the naming convention a bit" Placement="TooltipPlacement.Left">
        <Switch Value="@Spiffy" Label="Extra weird" ValueChanged="@((newValue) => {Spiffy = newValue; if (Cultname is not null) {GenerateCultName();}})"></Switch>
    </Tooltip>
</p>

<p>
    <Tooltip Title="Show dice values" Placement="TooltipPlacement.Left">
        <Switch @bind-Value="@ShowDetails" Label="Show details"></Switch>
    </Tooltip>
</p>

<p>
    <Button Color="ButtonColor.Primary" Size="Size.Large" @onclick="GenerateCultName" TooltipTitle="Generates a new name for your cult" TooltipPlacement="TooltipPlacement.Auto">
        <Icon Name="@ThingyDexer.WASM.General.Randomizer.DiceIcon" /> Click me
    </Button>
</p>

@if (Cultname.HasValue)
{
    <Callout Type="CalloutType.Default" Heading="Cult name">
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-10">
                <h4>
                    <strong>
                        @Displayname
                    </strong>
                </h4>
            </div>
        </div>
        <hr />
        <p>@($"{TimeStamp:dd-MM-yyyy HH:mm:ss}")</p>
    </Callout>

    @if (ShowDetails)
    {
        <div class="row">
            <div class="col-sm-4 table-responsive">
                <Grid Data="@DisplayDetails"
                      class="table table-sm table-hover table-bordered table-striped"
              Responsive=true
              AllowSorting=false
              AllowFiltering=true>

                    <GridColumn TItem="RegelString" PropertyName="Index" HeaderText="Index" Filterable=false Sortable=false Class="col-sm-1">
                        <Button Color="ButtonColor.None"
                        Disabled=false
                        Size="Size.Small"
                        Type="ButtonType.Link"
                        @onclick="((args) => OnClickWithArgs(args, context))">
                            @if (context.Equals(SelectedRegel))
                            {
                                <Icon Name="IconName.Check2Square" />
                            }
                            else
                            {
                                <Icon Name="IconName.Square" />
                            }
                        </Button>

                        @context.Id
                    </GridColumn>
                    <GridColumn TItem="RegelString" PropertyName="Value" HeaderText="Value" Filterable=true Sortable=false FilterOperator="FilterOperator.Contains" Class="alert-warning">
                        @context.Name
                    </GridColumn>
                </Grid>
            </div>
            <div class="col table-responsive">
                @if (ShowDetails && (SelectedRegel is not null))
                {
                    <Grid Data="@SelectedRegel?.Source?.Rows(o => new SelectableRegelString() { Selected = (o.Index == SelectedRegel.Id), Id= o.Index, Name = o.Value})"
                          class="table table-sm table-hover table-bordered table-striped"
              AllowPaging=true
              PaginationAlignment="Alignment.Start"
              Responsive=true
              AllowFiltering=true
              AllowSorting=true>
                        <GridColumn TItem="SelectableRegelString" PropertyName="Selected" HeaderText="" Sortable=false FilterOperator="FilterOperator.Equals">
                            @if (context.Selected)
                            {
                                <Icon Name="IconName.Check2Square"></Icon>
                            }
                            else
                            {
                                <Icon Name="IconName.Square"></Icon>
                            }
                        </GridColumn>
                        <GridColumn TItem="SelectableRegelString"
                        PropertyName="Id"
                        HeaderText="Id"
                        IsDefaultSortColumn=true SortDirection="SortDirection.Ascending" SortKeySelector="@((o) => o.Id)">
                            @if (context.Selected)
                            {
                                <strong>@context.Id</strong>
                            }
                            else
                            {
                                @context.Id
                            }
                        </GridColumn>
                        <GridColumn TItem="SelectableRegelString" PropertyName="Name" HeaderText="Value" Sortable=true SortKeySelector="@((o) => o.Name)">
                            @if (context.Selected)
                            {
                                <strong>@context.Name</strong>
                            }
                            else
                            {
                                @context.Name
                            }
                        </GridColumn>
                    </Grid>
                }
            </div>
        </div>
    }
}
else
{
    <Callout Type="CalloutType.Tip">
        <h4>Try clicking the button ...</h4>
    </Callout>
}



