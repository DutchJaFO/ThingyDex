@page "/createcult"

@using BlazorBootstrap
@using ThingyDexer.ViewModel
@using ThingyDexer.ViewModel.Table

<PageTitle>Cult</PageTitle>

<h1>Starting a cult</h1>

<p>
    <Tooltip Title="Changes the naming convention a bit" Placement="TooltipPlacement.Left">
        <Switch Value="@Spiffy" Label="Extra weird" ValueChanged="@((newValue) => {Spiffy = newValue; if (Cultname is not null) {GenerateCultName();}})"></Switch>
    </Tooltip>
</p>

<p>
    <Tooltip Title="Show dice values" Placement="TooltipPlacement.Left">
        <Switch @bind-Value="@ShowDetails" Label="Show details"></Switch>
    </Tooltip>
</p>

<p>
    <Button Color="ButtonColor.Primary" Size="Size.Large" @onclick="GenerateCultName" TooltipTitle="Generates a new name for your cult" TooltipPlacement="TooltipPlacement.Auto">
        <Icon Name="@ThingyDexer.WASM.General.Randomizer.DiceIcon" /> Click me
    </Button>
</p>

@if (Cultname.HasValue)
{
    <Callout Type="CalloutType.Default" Heading="Cult name">
        <p>
            <h4>
                <strong>
                    @Displayname
                </strong>
            </h4>
        </p>
        @if (ShowDetails)
        {
            <Grid Data="@DisplayDetails" class="table table-hover table-bordered table-striped" Responsive=true AllowSorting=false AllowFiltering=false>
                <GridColumn TItem="RegelString" PropertyName="Index" HeaderText="Index" >
                    <Button Color="ButtonColor.Info"
                    Active="@(VisibleTable == context.Source)"
                    Block="@(VisibleTable == context.Source)"
                    Disabled=false
                    Size="Size.Small"
                    Type="ButtonType.Button"
                    @onclick="((args) => OnClickWithArgs(args, (context.Id, context.Source)))">
                        @if ((VisibleTable == context.Source) && (context.Id == SelectedId))
                        {
                            <Icon Name="IconName.EyeFill" />
                        }
                        else
                        {
                            <Icon Name="IconName.Eye" />
                        }
                    </Button>

                    @context.Id
                </GridColumn>
                <GridColumn TItem="RegelString" PropertyName="Value" HeaderText="Value">
                    @context.Name
                </GridColumn>
            </Grid>
        }
        <br />
        <p>@($"{TimeStamp:dd-MM-yyyy HH:mm:ss}")</p>
    </Callout>

    @if (ShowDetails && (@VisibleTable is not null))
    {
        <div>
            <p>
                <span>Table name :</span> @VisibleTable?.Name
            </p>

            <Grid Data="@VisibleTable?.Rows(o => new SelectableRegelString() { Selected = (o.Index == SelectedId), Id= o.Index, Name = o.Value})"
                  class="table table-striped"
          PageSize="10" AllowPaging=true PaginationAlignment="Alignment.Start" Responsive=true
          AllowFiltering=true AllowSorting=true>
                <GridColumn TItem="SelectableRegelString" PropertyName="Selected" HeaderText="Selected">
                    @if (context.Selected)
                    {
                        <Icon Name="IconName.Check2Square" Size="IconSize.x2"></Icon>
                    }
                    else
                    {
                        <Icon Name="IconName.Square" Size="IconSize.x2"></Icon>
                    }
                </GridColumn>
                <GridColumn TItem="SelectableRegelString" PropertyName="Id" HeaderText="Id">
                    @if (context.Selected)
                    {
                        <strong>@context.Id</strong>
                    }
                    else
                    {
                        @context.Id
                    }
                </GridColumn>
                <GridColumn TItem="SelectableRegelString" PropertyName="Name" HeaderText="Value">
                    @if (context.Selected)
                    {
                        <strong>@context.Name</strong>
                    }
                    else
                    {
                        @context.Name
                    }
                </GridColumn>
            </Grid>
        </div>
    }
}
else
{
    <Callout Type="CalloutType.Tip">
        <h4>Try clicking the button ...</h4>
    </Callout>
}



